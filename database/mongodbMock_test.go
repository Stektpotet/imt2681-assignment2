// Code generated by MockGen. DO NOT EDIT.
// Source: mongodb.go

package database

import (
	reflect "reflect"
	"testing"

	gomock "github.com/golang/mock/gomock"
	bson "gopkg.in/mgo.v2/bson"
)

func TestNewMockDBStorage(t *testing.T) {
	type args struct {
		ctrl *gomock.Controller
	}
	tests := []struct {
		name string
		args args
		want *MockDBStorage
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NewMockDBStorage(tt.args.ctrl); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewMockDBStorage() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorage_EXPECT(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockDBStorageMockRecorder
	}
	tests := []struct {
		name   string
		fields fields
		want   *MockDBStorageMockRecorder
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockDBStorage{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if got := m.EXPECT(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockDBStorage.EXPECT() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorage_CreateSession(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockDBStorageMockRecorder
	}
	tests := []struct {
		name   string
		fields fields
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockDBStorage{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			m.CreateSession()
		})
	}
}

func TestMockDBStorageMockRecorder_CreateSession(t *testing.T) {
	type fields struct {
		mock *MockDBStorage
	}
	tests := []struct {
		name   string
		fields fields
		want   *gomock.Call
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockDBStorageMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.CreateSession(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockDBStorageMockRecorder.CreateSession() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorage_Init(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockDBStorageMockRecorder
	}
	tests := []struct {
		name   string
		fields fields
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockDBStorage{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			m.Init()
		})
	}
}

func TestMockDBStorageMockRecorder_Init(t *testing.T) {
	type fields struct {
		mock *MockDBStorage
	}
	tests := []struct {
		name   string
		fields fields
		want   *gomock.Call
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockDBStorageMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.Init(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockDBStorageMockRecorder.Init() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorage_Add(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockDBStorageMockRecorder
	}
	type args struct {
		collection string
		data       interface{}
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		wantErr bool
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockDBStorage{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if err := m.Add(tt.args.collection, tt.args.data); (err != nil) != tt.wantErr {
				t.Errorf("MockDBStorage.Add() error = %v, wantErr %v", err, tt.wantErr)
			}
		})
	}
}

func TestMockDBStorageMockRecorder_Add(t *testing.T) {
	type fields struct {
		mock *MockDBStorage
	}
	type args struct {
		collection interface{}
		data       interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockDBStorageMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.Add(tt.args.collection, tt.args.data); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockDBStorageMockRecorder.Add() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorage_Count(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockDBStorageMockRecorder
	}
	type args struct {
		collection string
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   int
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockDBStorage{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if got := m.Count(tt.args.collection); got != tt.want {
				t.Errorf("MockDBStorage.Count() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorageMockRecorder_Count(t *testing.T) {
	type fields struct {
		mock *MockDBStorage
	}
	type args struct {
		collection interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockDBStorageMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.Count(tt.args.collection); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockDBStorageMockRecorder.Count() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorage_Get(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockDBStorageMockRecorder
	}
	type args struct {
		collection string
		query      bson.M
		data       interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockDBStorage{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if got := m.Get(tt.args.collection, tt.args.query, tt.args.data); got != tt.want {
				t.Errorf("MockDBStorage.Get() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorageMockRecorder_Get(t *testing.T) {
	type fields struct {
		mock *MockDBStorage
	}
	type args struct {
		collection interface{}
		query      interface{}
		data       interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockDBStorageMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.Get(tt.args.collection, tt.args.query, tt.args.data); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockDBStorageMockRecorder.Get() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorage_Delete(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockDBStorageMockRecorder
	}
	type args struct {
		collection string
		query      bson.M
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockDBStorage{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			if got := m.Delete(tt.args.collection, tt.args.query); got != tt.want {
				t.Errorf("MockDBStorage.Delete() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorageMockRecorder_Delete(t *testing.T) {
	type fields struct {
		mock *MockDBStorage
	}
	type args struct {
		collection interface{}
		query      interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockDBStorageMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.Delete(tt.args.collection, tt.args.query); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockDBStorageMockRecorder.Delete() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockDBStorage_GetAll(t *testing.T) {
	type fields struct {
		ctrl     *gomock.Controller
		recorder *MockDBStorageMockRecorder
	}
	type args struct {
		collection string
		data       interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &MockDBStorage{
				ctrl:     tt.fields.ctrl,
				recorder: tt.fields.recorder,
			}
			m.GetAll(tt.args.collection, tt.args.data)
		})
	}
}

func TestMockDBStorageMockRecorder_GetAll(t *testing.T) {
	type fields struct {
		mock *MockDBStorage
	}
	type args struct {
		collection interface{}
		data       interface{}
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   *gomock.Call
	}{
	// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mr := &MockDBStorageMockRecorder{
				mock: tt.fields.mock,
			}
			if got := mr.GetAll(tt.args.collection, tt.args.data); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockDBStorageMockRecorder.GetAll() = %v, want %v", got, tt.want)
			}
		})
	}
}
