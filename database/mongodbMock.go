// Code generated by MockGen. DO NOT EDIT.
// Source: mongodb.go

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mgo_v2 "gopkg.in/mgo.v2"
	bson "gopkg.in/mgo.v2/bson"
)

// MockDBStorage is a mock of DBStorage interface
type MockDBStorage struct {
	ctrl     *gomock.Controller
	recorder *MockDBStorageMockRecorder
}

// MockDBStorageMockRecorder is the mock recorder for MockDBStorage
type MockDBStorageMockRecorder struct {
	mock *MockDBStorage
}

// NewMockDBStorage creates a new mock instance
func NewMockDBStorage(ctrl *gomock.Controller) *MockDBStorage {
	mock := &MockDBStorage{ctrl: ctrl}
	mock.recorder = &MockDBStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBStorage) EXPECT() *MockDBStorageMockRecorder {
	return m.recorder
}

// CreateSession mocks base method
func (m *MockDBStorage) CreateSession() *mgo_v2.Session {
	ret := m.ctrl.Call(m, "CreateSession")
	ret0, _ := ret[0].(*mgo_v2.Session)
	return ret0
}

// CreateSession indicates an expected call of CreateSession
func (mr *MockDBStorageMockRecorder) CreateSession() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockDBStorage)(nil).CreateSession))
}

// Init mocks base method
func (m *MockDBStorage) Init() {
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init
func (mr *MockDBStorageMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockDBStorage)(nil).Init))
}

// Add mocks base method
func (m *MockDBStorage) Add(collection string, data interface{}) error {
	ret := m.ctrl.Call(m, "Add", collection, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add
func (mr *MockDBStorageMockRecorder) Add(collection, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDBStorage)(nil).Add), collection, data)
}

// Count mocks base method
func (m *MockDBStorage) Count(collection string) int {
	ret := m.ctrl.Call(m, "Count", collection)
	ret0, _ := ret[0].(int)
	return ret0
}

// Count indicates an expected call of Count
func (mr *MockDBStorageMockRecorder) Count(collection interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDBStorage)(nil).Count), collection)
}

// Get mocks base method
func (m *MockDBStorage) Get(collection string, query bson.M, data interface{}) bool {
	ret := m.ctrl.Call(m, "Get", collection, query, data)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDBStorageMockRecorder) Get(collection, query, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDBStorage)(nil).Get), collection, query, data)
}

// Delete mocks base method
func (m *MockDBStorage) Delete(collection string, query bson.M) bool {
	ret := m.ctrl.Call(m, "Delete", collection, query)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockDBStorageMockRecorder) Delete(collection, query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDBStorage)(nil).Delete), collection, query)
}

// GetAll mocks base method
func (m *MockDBStorage) GetAll(collection string, data interface{}) {
	m.ctrl.Call(m, "GetAll", collection, data)
}

// GetAll indicates an expected call of GetAll
func (mr *MockDBStorageMockRecorder) GetAll(collection, data interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDBStorage)(nil).GetAll), collection, data)
}

// DropCollection mocks base method
func (m *MockDBStorage) DropCollection(collection string) {
	m.ctrl.Call(m, "DropCollection", collection)
}

// DropCollection indicates an expected call of DropCollection
func (mr *MockDBStorageMockRecorder) DropCollection(collection interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropCollection", reflect.TypeOf((*MockDBStorage)(nil).DropCollection), collection)
}

// Drop mocks base method
func (m *MockDBStorage) Drop() {
	m.ctrl.Call(m, "Drop")
}

// Drop indicates an expected call of Drop
func (mr *MockDBStorageMockRecorder) Drop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockDBStorage)(nil).Drop))
}
